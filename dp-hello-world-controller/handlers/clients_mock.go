// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handlers

import (
	"github.com/ONSdigital/dp-renderer/model"
	"io"
	"sync"
)

var (
	lockClientErrorMockCode  sync.RWMutex
	lockClientErrorMockError sync.RWMutex
)

// Ensure, that ClientErrorMock does implement ClientError.
// If this is not the case, regenerate this file with moq.
var _ ClientError = &ClientErrorMock{}

// ClientErrorMock is a mock implementation of ClientError.
//
//     func TestSomethingThatUsesClientError(t *testing.T) {
//
//         // make and configure a mocked ClientError
//         mockedClientError := &ClientErrorMock{
//             CodeFunc: func() int {
// 	               panic("mock out the Code method")
//             },
//             ErrorFunc: func() string {
// 	               panic("mock out the Error method")
//             },
//         }
//
//         // use mockedClientError in code that requires ClientError
//         // and then make assertions.
//
//     }
type ClientErrorMock struct {
	// CodeFunc mocks the Code method.
	CodeFunc func() int

	// ErrorFunc mocks the Error method.
	ErrorFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Code holds details about calls to the Code method.
		Code []struct {
		}
		// Error holds details about calls to the Error method.
		Error []struct {
		}
	}
}

// Code calls CodeFunc.
func (mock *ClientErrorMock) Code() int {
	if mock.CodeFunc == nil {
		panic("ClientErrorMock.CodeFunc: method is nil but ClientError.Code was just called")
	}
	callInfo := struct {
	}{}
	lockClientErrorMockCode.Lock()
	mock.calls.Code = append(mock.calls.Code, callInfo)
	lockClientErrorMockCode.Unlock()
	return mock.CodeFunc()
}

// CodeCalls gets all the calls that were made to Code.
// Check the length with:
//     len(mockedClientError.CodeCalls())
func (mock *ClientErrorMock) CodeCalls() []struct {
} {
	var calls []struct {
	}
	lockClientErrorMockCode.RLock()
	calls = mock.calls.Code
	lockClientErrorMockCode.RUnlock()
	return calls
}

// Error calls ErrorFunc.
func (mock *ClientErrorMock) Error() string {
	if mock.ErrorFunc == nil {
		panic("ClientErrorMock.ErrorFunc: method is nil but ClientError.Error was just called")
	}
	callInfo := struct {
	}{}
	lockClientErrorMockError.Lock()
	mock.calls.Error = append(mock.calls.Error, callInfo)
	lockClientErrorMockError.Unlock()
	return mock.ErrorFunc()
}

// ErrorCalls gets all the calls that were made to Error.
// Check the length with:
//     len(mockedClientError.ErrorCalls())
func (mock *ClientErrorMock) ErrorCalls() []struct {
} {
	var calls []struct {
	}
	lockClientErrorMockError.RLock()
	calls = mock.calls.Error
	lockClientErrorMockError.RUnlock()
	return calls
}

var (
	lockRenderClientMockBuildPage        sync.RWMutex
	lockRenderClientMockNewBasePageModel sync.RWMutex
)

// Ensure, that RenderClientMock does implement RenderClient.
// If this is not the case, regenerate this file with moq.
var _ RenderClient = &RenderClientMock{}

// RenderClientMock is a mock implementation of RenderClient.
//
//     func TestSomethingThatUsesRenderClient(t *testing.T) {
//
//         // make and configure a mocked RenderClient
//         mockedRenderClient := &RenderClientMock{
//             BuildPageFunc: func(w io.Writer, pageModel interface{}, templateName string)  {
// 	               panic("mock out the BuildPage method")
//             },
//             NewBasePageModelFunc: func() model.Page {
// 	               panic("mock out the NewBasePageModel method")
//             },
//         }
//
//         // use mockedRenderClient in code that requires RenderClient
//         // and then make assertions.
//
//     }
type RenderClientMock struct {
	// BuildPageFunc mocks the BuildPage method.
	BuildPageFunc func(w io.Writer, pageModel interface{}, templateName string)

	// NewBasePageModelFunc mocks the NewBasePageModel method.
	NewBasePageModelFunc func() model.Page

	// calls tracks calls to the methods.
	calls struct {
		// BuildPage holds details about calls to the BuildPage method.
		BuildPage []struct {
			// W is the w argument value.
			W io.Writer
			// PageModel is the pageModel argument value.
			PageModel interface{}
			// TemplateName is the templateName argument value.
			TemplateName string
		}
		// NewBasePageModel holds details about calls to the NewBasePageModel method.
		NewBasePageModel []struct {
		}
	}
}

// BuildPage calls BuildPageFunc.
func (mock *RenderClientMock) BuildPage(w io.Writer, pageModel interface{}, templateName string) {
	if mock.BuildPageFunc == nil {
		panic("RenderClientMock.BuildPageFunc: method is nil but RenderClient.BuildPage was just called")
	}
	callInfo := struct {
		W            io.Writer
		PageModel    interface{}
		TemplateName string
	}{
		W:            w,
		PageModel:    pageModel,
		TemplateName: templateName,
	}
	lockRenderClientMockBuildPage.Lock()
	mock.calls.BuildPage = append(mock.calls.BuildPage, callInfo)
	lockRenderClientMockBuildPage.Unlock()
	mock.BuildPageFunc(w, pageModel, templateName)
}

// BuildPageCalls gets all the calls that were made to BuildPage.
// Check the length with:
//     len(mockedRenderClient.BuildPageCalls())
func (mock *RenderClientMock) BuildPageCalls() []struct {
	W            io.Writer
	PageModel    interface{}
	TemplateName string
} {
	var calls []struct {
		W            io.Writer
		PageModel    interface{}
		TemplateName string
	}
	lockRenderClientMockBuildPage.RLock()
	calls = mock.calls.BuildPage
	lockRenderClientMockBuildPage.RUnlock()
	return calls
}

// NewBasePageModel calls NewBasePageModelFunc.
func (mock *RenderClientMock) NewBasePageModel() model.Page {
	if mock.NewBasePageModelFunc == nil {
		panic("RenderClientMock.NewBasePageModelFunc: method is nil but RenderClient.NewBasePageModel was just called")
	}
	callInfo := struct {
	}{}
	lockRenderClientMockNewBasePageModel.Lock()
	mock.calls.NewBasePageModel = append(mock.calls.NewBasePageModel, callInfo)
	lockRenderClientMockNewBasePageModel.Unlock()
	return mock.NewBasePageModelFunc()
}

// NewBasePageModelCalls gets all the calls that were made to NewBasePageModel.
// Check the length with:
//     len(mockedRenderClient.NewBasePageModelCalls())
func (mock *RenderClientMock) NewBasePageModelCalls() []struct {
} {
	var calls []struct {
	}
	lockRenderClientMockNewBasePageModel.RLock()
	calls = mock.calls.NewBasePageModel
	lockRenderClientMockNewBasePageModel.RUnlock()
	return calls
}
